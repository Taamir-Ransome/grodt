[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["grodtd", "grodtbt"]

[project]
name = "grodt"
version = "0.1.0"
description = "Cryptocurrency trading system with daemon runtime and backtesting simulator"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Taamir Ransome", email = "taamir@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # Core runtime
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyarrow>=12.0.0",
    "polars>=0.20.0",
    "pandas-ta>=0.3.14b",
    "numba>=0.58.0",
    "httpx>=0.24.0",
    "websockets>=11.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "tenacity>=8.2.0",
    "structlog>=23.1.0",
    "prometheus-client>=0.17.0",
    "apscheduler>=3.10.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "psutil>=5.9.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "requests>=2.31.0",
    # Backtesting & analysis
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "joblib>=1.3.0",
    # Dev/quality
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "pytest-asyncio>=1.2.0",
    "pynacl>=1.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/Taamir-Ransome/grodt"
Repository = "https://github.com/Taamir-Ransome/grodt"
Issues = "https://github.com/Taamir-Ransome/grodt/issues"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 88
target-version = ['py312']

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=grodtd",
    "--cov=grodtbt",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "asyncio: marks tests as async",
]
